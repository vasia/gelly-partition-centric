/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.flink.graph.partition.centric;

import org.apache.flink.api.common.functions.IterationRuntimeContext;
import org.apache.flink.graph.Vertex;
import org.apache.flink.util.Collector;

import java.io.Serializable;

/**
 * This class must be extended by functions that compute the state of the vertex
 * after the intra-partition step has been completed.
 * The new vertex state is computed using messages generated by other partitions
 * and the current state of the vertex.
 * <p>
 * The central method is {@link #updateVertex(Vertex, MessageIterator)}, which is
 * invoked once per vertex per superstep.
 * 
 * @param <K> the vertex ID type
 * @param <VV> the vertex value type
 * @param <Message> the message type
 * @param <EV> the edge value type
 */
public abstract class VertexUpdateFunction<K, VV, Message, EV> implements Serializable {

	private static final long serialVersionUID = 1L;

	/**
	 * This method is invoked once per vertex per superstep. It receives the current state of the vertex, as well as
	 * the incoming messages. It may set a new vertex state via {@link #setNewVertexValue(Object)}. If the vertex
	 * state is changed, it will trigger the sending of messages via the {@link MessagingFunction}.
	 * 
	 * @param vertex The vertex.
	 * @param inMessages The incoming messages to this vertex.
	 * 
	 * @throws Exception The computation may throw exceptions, which causes the superstep to fail.
	 */
    public abstract void updateVertex(Vertex<K, VV> vertex, MessageIterator<Message> messages);

	/**
	 * This method is executed one per superstep before the vertex update function is invoked for each vertex.
	 * 
	 * @throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.
	 */
	public void preSuperstep() throws Exception {}
	
	/**
	 * This method is executed one per superstep after the vertex update function has been invoked for each vertex.
	 * 
	 * @throws Exception Exceptions in the post-superstep phase cause the superstep to fail.
	 */
	public void postSuperstep() throws Exception {}

	/**
	 * Gets the number of the superstep, starting at <tt>1</tt>.
	 * 
	 * @return The number of the current superstep.
	 */
	public int getSuperstepNumber() {
		return this.runtimeContext.getSuperstepNumber();
	}

	/**
	 * 
	 * @param newValue the new vertex value
	 */
    public void setNewVertexValue(VV newValue) {
		if(updated) {
			throw new IllegalStateException(
					"setNewVertexValue should only be called at most once per updateVertex");
		}
        updated = true;
        outVal.setValue(newValue);
		out.collect(outVal);
    }

	// --------------------------------------------------------------------------------------------
	//  internal methods
	// --------------------------------------------------------------------------------------------

    private IterationRuntimeContext runtimeContext;

    private Vertex<K, VV> outVal;

    private Collector<Vertex<K, VV>> out;

    private boolean updated;

	void init(IterationRuntimeContext context) {
		this.runtimeContext = context;
	}

	void setOutput(Vertex<K, VV> outVal, Collector<Vertex<K, VV>> out) {
		this.outVal = outVal;
		this.out = out;
		updated = false;
	}
}
